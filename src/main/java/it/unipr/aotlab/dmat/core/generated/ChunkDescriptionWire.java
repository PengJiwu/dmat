// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home/paolo/uni/dissertation/dmat/proto/ChunkDescriptionWire.proto

package it.unipr.aotlab.dmat.core.generated;

public final class ChunkDescriptionWire {
  private ChunkDescriptionWire() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum Format
      implements com.google.protobuf.ProtocolMessageEnum {
    COMPRESSEDROWS(0, 1),
    COMPRESSEDCOLUMNS(1, 2),
    DENSE(2, 3),
    ;
    
    public static final int COMPRESSEDROWS_VALUE = 1;
    public static final int COMPRESSEDCOLUMNS_VALUE = 2;
    public static final int DENSE_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static Format valueOf(int value) {
      switch (value) {
        case 1: return COMPRESSEDROWS;
        case 2: return COMPRESSEDCOLUMNS;
        case 3: return DENSE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Format>() {
            public Format findValueByNumber(int number) {
              return Format.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final Format[] VALUES = {
      COMPRESSEDROWS, COMPRESSEDCOLUMNS, DENSE, 
    };
    
    public static Format valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Format(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:Format)
  }
  
  public enum MatricesOnTheWire
      implements com.google.protobuf.ProtocolMessageEnum {
    DEFAULTMATRICESONTHEWIRE(0, 1),
    BYTES(1, 2),
    INT32TRIPLETS(2, 3),
    ;
    
    public static final int DEFAULTMATRICESONTHEWIRE_VALUE = 1;
    public static final int BYTES_VALUE = 2;
    public static final int INT32TRIPLETS_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static MatricesOnTheWire valueOf(int value) {
      switch (value) {
        case 1: return DEFAULTMATRICESONTHEWIRE;
        case 2: return BYTES;
        case 3: return INT32TRIPLETS;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<MatricesOnTheWire>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MatricesOnTheWire>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MatricesOnTheWire>() {
            public MatricesOnTheWire findValueByNumber(int number) {
              return MatricesOnTheWire.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final MatricesOnTheWire[] VALUES = {
      DEFAULTMATRICESONTHEWIRE, BYTES, INT32TRIPLETS, 
    };
    
    public static MatricesOnTheWire valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private MatricesOnTheWire(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:MatricesOnTheWire)
  }
  
  public interface ChunkDescriptionBodyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string matrixId = 1;
    boolean hasMatrixId();
    String getMatrixId();
    
    // required int32 matrixNofRows = 2;
    boolean hasMatrixNofRows();
    int getMatrixNofRows();
    
    // required int32 matrixNofColumns = 3;
    boolean hasMatrixNofColumns();
    int getMatrixNofColumns();
    
    // required string chunkId = 4;
    boolean hasChunkId();
    String getChunkId();
    
    // required .RectangleBody position = 5;
    boolean hasPosition();
    it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody getPosition();
    it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBodyOrBuilder getPositionOrBuilder();
    
    // required .TypeBody type = 6;
    boolean hasType();
    it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody getType();
    it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBodyOrBuilder getTypeOrBuilder();
    
    // required .Format format = 7 [default = DENSE];
    boolean hasFormat();
    it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format getFormat();
    
    // required .MatricesOnTheWire matricesOnTheWire = 8 [default = DEFAULTMATRICESONTHEWIRE];
    boolean hasMatricesOnTheWire();
    it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire getMatricesOnTheWire();
  }
  public static final class ChunkDescriptionBody extends
      com.google.protobuf.GeneratedMessage
      implements ChunkDescriptionBodyOrBuilder {
    // Use ChunkDescriptionBody.newBuilder() to construct.
    private ChunkDescriptionBody(Builder builder) {
      super(builder);
    }
    private ChunkDescriptionBody(boolean noInit) {}
    
    private static final ChunkDescriptionBody defaultInstance;
    public static ChunkDescriptionBody getDefaultInstance() {
      return defaultInstance;
    }
    
    public ChunkDescriptionBody getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.internal_static_ChunkDescriptionBody_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.internal_static_ChunkDescriptionBody_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string matrixId = 1;
    public static final int MATRIXID_FIELD_NUMBER = 1;
    private java.lang.Object matrixId_;
    public boolean hasMatrixId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getMatrixId() {
      java.lang.Object ref = matrixId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          matrixId_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMatrixIdBytes() {
      java.lang.Object ref = matrixId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        matrixId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required int32 matrixNofRows = 2;
    public static final int MATRIXNOFROWS_FIELD_NUMBER = 2;
    private int matrixNofRows_;
    public boolean hasMatrixNofRows() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public int getMatrixNofRows() {
      return matrixNofRows_;
    }
    
    // required int32 matrixNofColumns = 3;
    public static final int MATRIXNOFCOLUMNS_FIELD_NUMBER = 3;
    private int matrixNofColumns_;
    public boolean hasMatrixNofColumns() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getMatrixNofColumns() {
      return matrixNofColumns_;
    }
    
    // required string chunkId = 4;
    public static final int CHUNKID_FIELD_NUMBER = 4;
    private java.lang.Object chunkId_;
    public boolean hasChunkId() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public String getChunkId() {
      java.lang.Object ref = chunkId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          chunkId_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getChunkIdBytes() {
      java.lang.Object ref = chunkId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        chunkId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required .RectangleBody position = 5;
    public static final int POSITION_FIELD_NUMBER = 5;
    private it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody position_;
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody getPosition() {
      return position_;
    }
    public it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBodyOrBuilder getPositionOrBuilder() {
      return position_;
    }
    
    // required .TypeBody type = 6;
    public static final int TYPE_FIELD_NUMBER = 6;
    private it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody getType() {
      return type_;
    }
    public it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBodyOrBuilder getTypeOrBuilder() {
      return type_;
    }
    
    // required .Format format = 7 [default = DENSE];
    public static final int FORMAT_FIELD_NUMBER = 7;
    private it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format format_;
    public boolean hasFormat() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format getFormat() {
      return format_;
    }
    
    // required .MatricesOnTheWire matricesOnTheWire = 8 [default = DEFAULTMATRICESONTHEWIRE];
    public static final int MATRICESONTHEWIRE_FIELD_NUMBER = 8;
    private it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire matricesOnTheWire_;
    public boolean hasMatricesOnTheWire() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire getMatricesOnTheWire() {
      return matricesOnTheWire_;
    }
    
    private void initFields() {
      matrixId_ = "";
      matrixNofRows_ = 0;
      matrixNofColumns_ = 0;
      chunkId_ = "";
      position_ = it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.getDefaultInstance();
      type_ = it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.getDefaultInstance();
      format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format.DENSE;
      matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMatrixId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMatrixNofRows()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMatrixNofColumns()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasChunkId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPosition()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFormat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMatricesOnTheWire()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPosition().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getType().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMatrixIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, matrixNofRows_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, matrixNofColumns_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getChunkIdBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, position_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, type_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, format_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, matricesOnTheWire_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMatrixIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, matrixNofRows_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, matrixNofColumns_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getChunkIdBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, position_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, type_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, format_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, matricesOnTheWire_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBodyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.internal_static_ChunkDescriptionBody_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.internal_static_ChunkDescriptionBody_fieldAccessorTable;
      }
      
      // Construct using it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPositionFieldBuilder();
          getTypeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        matrixId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        matrixNofRows_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        matrixNofColumns_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        chunkId_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        if (positionBuilder_ == null) {
          position_ = it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.getDefaultInstance();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (typeBuilder_ == null) {
          type_ = it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.getDefaultInstance();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format.DENSE;
        bitField0_ = (bitField0_ & ~0x00000040);
        matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody.getDescriptor();
      }
      
      public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody getDefaultInstanceForType() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody.getDefaultInstance();
      }
      
      public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody build() {
        it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody buildPartial() {
        it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody result = new it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.matrixId_ = matrixId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.matrixNofRows_ = matrixNofRows_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.matrixNofColumns_ = matrixNofColumns_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.chunkId_ = chunkId_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (positionBuilder_ == null) {
          result.position_ = position_;
        } else {
          result.position_ = positionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (typeBuilder_ == null) {
          result.type_ = type_;
        } else {
          result.type_ = typeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.format_ = format_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.matricesOnTheWire_ = matricesOnTheWire_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody) {
          return mergeFrom((it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody other) {
        if (other == it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody.getDefaultInstance()) return this;
        if (other.hasMatrixId()) {
          setMatrixId(other.getMatrixId());
        }
        if (other.hasMatrixNofRows()) {
          setMatrixNofRows(other.getMatrixNofRows());
        }
        if (other.hasMatrixNofColumns()) {
          setMatrixNofColumns(other.getMatrixNofColumns());
        }
        if (other.hasChunkId()) {
          setChunkId(other.getChunkId());
        }
        if (other.hasPosition()) {
          mergePosition(other.getPosition());
        }
        if (other.hasType()) {
          mergeType(other.getType());
        }
        if (other.hasFormat()) {
          setFormat(other.getFormat());
        }
        if (other.hasMatricesOnTheWire()) {
          setMatricesOnTheWire(other.getMatricesOnTheWire());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMatrixId()) {
          
          return false;
        }
        if (!hasMatrixNofRows()) {
          
          return false;
        }
        if (!hasMatrixNofColumns()) {
          
          return false;
        }
        if (!hasChunkId()) {
          
          return false;
        }
        if (!hasPosition()) {
          
          return false;
        }
        if (!hasType()) {
          
          return false;
        }
        if (!hasFormat()) {
          
          return false;
        }
        if (!hasMatricesOnTheWire()) {
          
          return false;
        }
        if (!getPosition().isInitialized()) {
          
          return false;
        }
        if (!getType().isInitialized()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              matrixId_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              matrixNofRows_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              matrixNofColumns_ = input.readInt32();
              break;
            }
            case 34: {
              bitField0_ |= 0x00000008;
              chunkId_ = input.readBytes();
              break;
            }
            case 42: {
              it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.Builder subBuilder = it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.newBuilder();
              if (hasPosition()) {
                subBuilder.mergeFrom(getPosition());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setPosition(subBuilder.buildPartial());
              break;
            }
            case 50: {
              it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.Builder subBuilder = it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.newBuilder();
              if (hasType()) {
                subBuilder.mergeFrom(getType());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setType(subBuilder.buildPartial());
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format value = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                format_ = value;
              }
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire value = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                matricesOnTheWire_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string matrixId = 1;
      private java.lang.Object matrixId_ = "";
      public boolean hasMatrixId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getMatrixId() {
        java.lang.Object ref = matrixId_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          matrixId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMatrixId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        matrixId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatrixId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        matrixId_ = getDefaultInstance().getMatrixId();
        onChanged();
        return this;
      }
      void setMatrixId(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        matrixId_ = value;
        onChanged();
      }
      
      // required int32 matrixNofRows = 2;
      private int matrixNofRows_ ;
      public boolean hasMatrixNofRows() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public int getMatrixNofRows() {
        return matrixNofRows_;
      }
      public Builder setMatrixNofRows(int value) {
        bitField0_ |= 0x00000002;
        matrixNofRows_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatrixNofRows() {
        bitField0_ = (bitField0_ & ~0x00000002);
        matrixNofRows_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 matrixNofColumns = 3;
      private int matrixNofColumns_ ;
      public boolean hasMatrixNofColumns() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getMatrixNofColumns() {
        return matrixNofColumns_;
      }
      public Builder setMatrixNofColumns(int value) {
        bitField0_ |= 0x00000004;
        matrixNofColumns_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatrixNofColumns() {
        bitField0_ = (bitField0_ & ~0x00000004);
        matrixNofColumns_ = 0;
        onChanged();
        return this;
      }
      
      // required string chunkId = 4;
      private java.lang.Object chunkId_ = "";
      public boolean hasChunkId() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public String getChunkId() {
        java.lang.Object ref = chunkId_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          chunkId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setChunkId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        chunkId_ = value;
        onChanged();
        return this;
      }
      public Builder clearChunkId() {
        bitField0_ = (bitField0_ & ~0x00000008);
        chunkId_ = getDefaultInstance().getChunkId();
        onChanged();
        return this;
      }
      void setChunkId(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000008;
        chunkId_ = value;
        onChanged();
      }
      
      // required .RectangleBody position = 5;
      private it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody position_ = it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody, it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.Builder, it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBodyOrBuilder> positionBuilder_;
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody getPosition() {
        if (positionBuilder_ == null) {
          return position_;
        } else {
          return positionBuilder_.getMessage();
        }
      }
      public Builder setPosition(it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody value) {
        if (positionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          position_ = value;
          onChanged();
        } else {
          positionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder setPosition(
          it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.Builder builderForValue) {
        if (positionBuilder_ == null) {
          position_ = builderForValue.build();
          onChanged();
        } else {
          positionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder mergePosition(it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody value) {
        if (positionBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              position_ != it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.getDefaultInstance()) {
            position_ =
              it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.newBuilder(position_).mergeFrom(value).buildPartial();
          } else {
            position_ = value;
          }
          onChanged();
        } else {
          positionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      public Builder clearPosition() {
        if (positionBuilder_ == null) {
          position_ = it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.getDefaultInstance();
          onChanged();
        } else {
          positionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      public it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.Builder getPositionBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getPositionFieldBuilder().getBuilder();
      }
      public it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBodyOrBuilder getPositionOrBuilder() {
        if (positionBuilder_ != null) {
          return positionBuilder_.getMessageOrBuilder();
        } else {
          return position_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody, it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.Builder, it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBodyOrBuilder> 
          getPositionFieldBuilder() {
        if (positionBuilder_ == null) {
          positionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody, it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBody.Builder, it.unipr.aotlab.dmat.core.generated.RectangleWire.RectangleBodyOrBuilder>(
                  position_,
                  getParentForChildren(),
                  isClean());
          position_ = null;
        }
        return positionBuilder_;
      }
      
      // required .TypeBody type = 6;
      private it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody type_ = it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody, it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.Builder, it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBodyOrBuilder> typeBuilder_;
      public boolean hasType() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody getType() {
        if (typeBuilder_ == null) {
          return type_;
        } else {
          return typeBuilder_.getMessage();
        }
      }
      public Builder setType(it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody value) {
        if (typeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          type_ = value;
          onChanged();
        } else {
          typeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder setType(
          it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.Builder builderForValue) {
        if (typeBuilder_ == null) {
          type_ = builderForValue.build();
          onChanged();
        } else {
          typeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder mergeType(it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody value) {
        if (typeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              type_ != it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.getDefaultInstance()) {
            type_ =
              it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.newBuilder(type_).mergeFrom(value).buildPartial();
          } else {
            type_ = value;
          }
          onChanged();
        } else {
          typeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      public Builder clearType() {
        if (typeBuilder_ == null) {
          type_ = it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.getDefaultInstance();
          onChanged();
        } else {
          typeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      public it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.Builder getTypeBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTypeFieldBuilder().getBuilder();
      }
      public it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBodyOrBuilder getTypeOrBuilder() {
        if (typeBuilder_ != null) {
          return typeBuilder_.getMessageOrBuilder();
        } else {
          return type_;
        }
      }
      private com.google.protobuf.SingleFieldBuilder<
          it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody, it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.Builder, it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBodyOrBuilder> 
          getTypeFieldBuilder() {
        if (typeBuilder_ == null) {
          typeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody, it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBody.Builder, it.unipr.aotlab.dmat.core.generated.TypeWire.TypeBodyOrBuilder>(
                  type_,
                  getParentForChildren(),
                  isClean());
          type_ = null;
        }
        return typeBuilder_;
      }
      
      // required .Format format = 7 [default = DENSE];
      private it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format.DENSE;
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format getFormat() {
        return format_;
      }
      public Builder setFormat(it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        format_ = value;
        onChanged();
        return this;
      }
      public Builder clearFormat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.Format.DENSE;
        onChanged();
        return this;
      }
      
      // required .MatricesOnTheWire matricesOnTheWire = 8 [default = DEFAULTMATRICESONTHEWIRE];
      private it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
      public boolean hasMatricesOnTheWire() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire getMatricesOnTheWire() {
        return matricesOnTheWire_;
      }
      public Builder setMatricesOnTheWire(it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        matricesOnTheWire_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatricesOnTheWire() {
        bitField0_ = (bitField0_ & ~0x00000080);
        matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:ChunkDescriptionBody)
    }
    
    static {
      defaultInstance = new ChunkDescriptionBody(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:ChunkDescriptionBody)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ChunkDescriptionBody_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ChunkDescriptionBody_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nAhome/paolo/uni/dissertation/dmat/proto" +
      "/ChunkDescriptionWire.proto\032\023RectangleWi" +
      "re.proto\032\016TypeWire.proto\"\216\002\n\024ChunkDescri" +
      "ptionBody\022\020\n\010matrixId\030\001 \002(\t\022\025\n\rmatrixNof" +
      "Rows\030\002 \002(\005\022\030\n\020matrixNofColumns\030\003 \002(\005\022\017\n\007" +
      "chunkId\030\004 \002(\t\022 \n\010position\030\005 \002(\0132\016.Rectan" +
      "gleBody\022\027\n\004type\030\006 \002(\0132\t.TypeBody\022\036\n\006form" +
      "at\030\007 \002(\0162\007.Format:\005DENSE\022G\n\021matricesOnTh" +
      "eWire\030\010 \002(\0162\022.MatricesOnTheWire:\030DEFAULT" +
      "MATRICESONTHEWIRE*>\n\006Format\022\022\n\016COMPRESSE",
      "DROWS\020\001\022\025\n\021COMPRESSEDCOLUMNS\020\002\022\t\n\005DENSE\020" +
      "\003*O\n\021MatricesOnTheWire\022\034\n\030DEFAULTMATRICE" +
      "SONTHEWIRE\020\001\022\t\n\005BYTES\020\002\022\021\n\rINT32TRIPLETS" +
      "\020\003B%\n#it.unipr.aotlab.dmat.core.generate" +
      "d"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_ChunkDescriptionBody_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_ChunkDescriptionBody_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ChunkDescriptionBody_descriptor,
              new java.lang.String[] { "MatrixId", "MatrixNofRows", "MatrixNofColumns", "ChunkId", "Position", "Type", "Format", "MatricesOnTheWire", },
              it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody.class,
              it.unipr.aotlab.dmat.core.generated.ChunkDescriptionWire.ChunkDescriptionBody.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          it.unipr.aotlab.dmat.core.generated.RectangleWire.getDescriptor(),
          it.unipr.aotlab.dmat.core.generated.TypeWire.getDescriptor(),
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
