// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: home/paolo/uni/dissertation/dmat/proto/ChunkDescription.proto

package it.unipr.aotlab.dmat.core.generated;

public final class ChunkDescription {
  private ChunkDescription() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public enum Format
      implements com.google.protobuf.ProtocolMessageEnum {
    COMPRESSEDROWS(0, 1),
    COMPRESSEDCOLUMNS(1, 2),
    DENSE(2, 3),
    ;
    
    public static final int COMPRESSEDROWS_VALUE = 1;
    public static final int COMPRESSEDCOLUMNS_VALUE = 2;
    public static final int DENSE_VALUE = 3;
    
    
    public final int getNumber() { return value; }
    
    public static Format valueOf(int value) {
      switch (value) {
        case 1: return COMPRESSEDROWS;
        case 2: return COMPRESSEDCOLUMNS;
        case 3: return DENSE;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Format>() {
            public Format findValueByNumber(int number) {
              return Format.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescription.getDescriptor().getEnumTypes().get(0);
    }
    
    private static final Format[] VALUES = {
      COMPRESSEDROWS, COMPRESSEDCOLUMNS, DENSE, 
    };
    
    public static Format valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private Format(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:Format)
  }
  
  public enum ElementType
      implements com.google.protobuf.ProtocolMessageEnum {
    BOOL(0, 1),
    INT8(1, 2),
    INT16(2, 3),
    INT32(3, 4),
    INT64(4, 5),
    UINT8(5, 6),
    UINT16(6, 7),
    UINT32(7, 8),
    UINT64(8, 9),
    FLOAT32(9, 10),
    FLOAT64(10, 11),
    ;
    
    public static final int BOOL_VALUE = 1;
    public static final int INT8_VALUE = 2;
    public static final int INT16_VALUE = 3;
    public static final int INT32_VALUE = 4;
    public static final int INT64_VALUE = 5;
    public static final int UINT8_VALUE = 6;
    public static final int UINT16_VALUE = 7;
    public static final int UINT32_VALUE = 8;
    public static final int UINT64_VALUE = 9;
    public static final int FLOAT32_VALUE = 10;
    public static final int FLOAT64_VALUE = 11;
    
    
    public final int getNumber() { return value; }
    
    public static ElementType valueOf(int value) {
      switch (value) {
        case 1: return BOOL;
        case 2: return INT8;
        case 3: return INT16;
        case 4: return INT32;
        case 5: return INT64;
        case 6: return UINT8;
        case 7: return UINT16;
        case 8: return UINT32;
        case 9: return UINT64;
        case 10: return FLOAT32;
        case 11: return FLOAT64;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<ElementType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ElementType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ElementType>() {
            public ElementType findValueByNumber(int number) {
              return ElementType.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescription.getDescriptor().getEnumTypes().get(1);
    }
    
    private static final ElementType[] VALUES = {
      BOOL, INT8, INT16, INT32, INT64, UINT8, UINT16, UINT32, UINT64, FLOAT32, FLOAT64, 
    };
    
    public static ElementType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private ElementType(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:ElementType)
  }
  
  public enum SemiRing
      implements com.google.protobuf.ProtocolMessageEnum {
    DEFAULTSEMIRING(0, 1),
    INT32ORDINARY(1, 2),
    INT32TROPICAL(2, 3),
    BOOLEANORDINARY(3, 4),
    ;
    
    public static final int DEFAULTSEMIRING_VALUE = 1;
    public static final int INT32ORDINARY_VALUE = 2;
    public static final int INT32TROPICAL_VALUE = 3;
    public static final int BOOLEANORDINARY_VALUE = 4;
    
    
    public final int getNumber() { return value; }
    
    public static SemiRing valueOf(int value) {
      switch (value) {
        case 1: return DEFAULTSEMIRING;
        case 2: return INT32ORDINARY;
        case 3: return INT32TROPICAL;
        case 4: return BOOLEANORDINARY;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<SemiRing>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<SemiRing>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SemiRing>() {
            public SemiRing findValueByNumber(int number) {
              return SemiRing.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescription.getDescriptor().getEnumTypes().get(2);
    }
    
    private static final SemiRing[] VALUES = {
      DEFAULTSEMIRING, INT32ORDINARY, INT32TROPICAL, BOOLEANORDINARY, 
    };
    
    public static SemiRing valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private SemiRing(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:SemiRing)
  }
  
  public enum MatricesOnTheWire
      implements com.google.protobuf.ProtocolMessageEnum {
    DEFAULTMATRICESONTHEWIRE(0, 1),
    INT32TRIPLETS(1, 2),
    ;
    
    public static final int DEFAULTMATRICESONTHEWIRE_VALUE = 1;
    public static final int INT32TRIPLETS_VALUE = 2;
    
    
    public final int getNumber() { return value; }
    
    public static MatricesOnTheWire valueOf(int value) {
      switch (value) {
        case 1: return DEFAULTMATRICESONTHEWIRE;
        case 2: return INT32TRIPLETS;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<MatricesOnTheWire>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MatricesOnTheWire>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MatricesOnTheWire>() {
            public MatricesOnTheWire findValueByNumber(int number) {
              return MatricesOnTheWire.valueOf(number);
            }
          };
    
    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescription.getDescriptor().getEnumTypes().get(3);
    }
    
    private static final MatricesOnTheWire[] VALUES = {
      DEFAULTMATRICESONTHEWIRE, INT32TRIPLETS, 
    };
    
    public static MatricesOnTheWire valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }
    
    private final int index;
    private final int value;
    
    private MatricesOnTheWire(int index, int value) {
      this.index = index;
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:MatricesOnTheWire)
  }
  
  public interface BodyOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required string matrixId = 1;
    boolean hasMatrixId();
    String getMatrixId();
    
    // required string chunkId = 2;
    boolean hasChunkId();
    String getChunkId();
    
    // required int32 startRow = 3;
    boolean hasStartRow();
    int getStartRow();
    
    // required int32 endRow = 4;
    boolean hasEndRow();
    int getEndRow();
    
    // required int32 startCol = 5;
    boolean hasStartCol();
    int getStartCol();
    
    // required int32 endCol = 6;
    boolean hasEndCol();
    int getEndCol();
    
    // required .Format format = 7 [default = DENSE];
    boolean hasFormat();
    it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format getFormat();
    
    // required .ElementType elementType = 8 [default = INT32];
    boolean hasElementType();
    it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType getElementType();
    
    // required .SemiRing semiRing = 9 [default = DEFAULTSEMIRING];
    boolean hasSemiRing();
    it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing getSemiRing();
    
    // required .MatricesOnTheWire matricesOnTheWire = 10 [default = DEFAULTMATRICESONTHEWIRE];
    boolean hasMatricesOnTheWire();
    it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire getMatricesOnTheWire();
  }
  public static final class Body extends
      com.google.protobuf.GeneratedMessage
      implements BodyOrBuilder {
    // Use Body.newBuilder() to construct.
    private Body(Builder builder) {
      super(builder);
    }
    private Body(boolean noInit) {}
    
    private static final Body defaultInstance;
    public static Body getDefaultInstance() {
      return defaultInstance;
    }
    
    public Body getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescription.internal_static_Body_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return it.unipr.aotlab.dmat.core.generated.ChunkDescription.internal_static_Body_fieldAccessorTable;
    }
    
    private int bitField0_;
    // required string matrixId = 1;
    public static final int MATRIXID_FIELD_NUMBER = 1;
    private java.lang.Object matrixId_;
    public boolean hasMatrixId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public String getMatrixId() {
      java.lang.Object ref = matrixId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          matrixId_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getMatrixIdBytes() {
      java.lang.Object ref = matrixId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        matrixId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required string chunkId = 2;
    public static final int CHUNKID_FIELD_NUMBER = 2;
    private java.lang.Object chunkId_;
    public boolean hasChunkId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public String getChunkId() {
      java.lang.Object ref = chunkId_;
      if (ref instanceof String) {
        return (String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        if (com.google.protobuf.Internal.isValidUtf8(bs)) {
          chunkId_ = s;
        }
        return s;
      }
    }
    private com.google.protobuf.ByteString getChunkIdBytes() {
      java.lang.Object ref = chunkId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8((String) ref);
        chunkId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    
    // required int32 startRow = 3;
    public static final int STARTROW_FIELD_NUMBER = 3;
    private int startRow_;
    public boolean hasStartRow() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getStartRow() {
      return startRow_;
    }
    
    // required int32 endRow = 4;
    public static final int ENDROW_FIELD_NUMBER = 4;
    private int endRow_;
    public boolean hasEndRow() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getEndRow() {
      return endRow_;
    }
    
    // required int32 startCol = 5;
    public static final int STARTCOL_FIELD_NUMBER = 5;
    private int startCol_;
    public boolean hasStartCol() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getStartCol() {
      return startCol_;
    }
    
    // required int32 endCol = 6;
    public static final int ENDCOL_FIELD_NUMBER = 6;
    private int endCol_;
    public boolean hasEndCol() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getEndCol() {
      return endCol_;
    }
    
    // required .Format format = 7 [default = DENSE];
    public static final int FORMAT_FIELD_NUMBER = 7;
    private it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format format_;
    public boolean hasFormat() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format getFormat() {
      return format_;
    }
    
    // required .ElementType elementType = 8 [default = INT32];
    public static final int ELEMENTTYPE_FIELD_NUMBER = 8;
    private it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType elementType_;
    public boolean hasElementType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType getElementType() {
      return elementType_;
    }
    
    // required .SemiRing semiRing = 9 [default = DEFAULTSEMIRING];
    public static final int SEMIRING_FIELD_NUMBER = 9;
    private it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing semiRing_;
    public boolean hasSemiRing() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing getSemiRing() {
      return semiRing_;
    }
    
    // required .MatricesOnTheWire matricesOnTheWire = 10 [default = DEFAULTMATRICESONTHEWIRE];
    public static final int MATRICESONTHEWIRE_FIELD_NUMBER = 10;
    private it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire matricesOnTheWire_;
    public boolean hasMatricesOnTheWire() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire getMatricesOnTheWire() {
      return matricesOnTheWire_;
    }
    
    private void initFields() {
      matrixId_ = "";
      chunkId_ = "";
      startRow_ = 0;
      endRow_ = 0;
      startCol_ = 0;
      endCol_ = 0;
      format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format.DENSE;
      elementType_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType.INT32;
      semiRing_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing.DEFAULTSEMIRING;
      matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasMatrixId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasChunkId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartRow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEndRow()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasStartCol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasEndCol()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFormat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasElementType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSemiRing()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMatricesOnTheWire()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, getMatrixIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getChunkIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, startRow_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, endRow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, startCol_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, endCol_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, format_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, elementType_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, semiRing_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, matricesOnTheWire_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, getMatrixIdBytes());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getChunkIdBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, startRow_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, endRow_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, startCol_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, endCol_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, format_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, elementType_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, semiRing_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, matricesOnTheWire_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements it.unipr.aotlab.dmat.core.generated.ChunkDescription.BodyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescription.internal_static_Body_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescription.internal_static_Body_fieldAccessorTable;
      }
      
      // Construct using it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        matrixId_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        chunkId_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        startRow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        endRow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        startCol_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        endCol_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format.DENSE;
        bitField0_ = (bitField0_ & ~0x00000040);
        elementType_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType.INT32;
        bitField0_ = (bitField0_ & ~0x00000080);
        semiRing_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing.DEFAULTSEMIRING;
        bitField0_ = (bitField0_ & ~0x00000100);
        matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body.getDescriptor();
      }
      
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body getDefaultInstanceForType() {
        return it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body.getDefaultInstance();
      }
      
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body build() {
        it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body buildPartial() {
        it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body result = new it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.matrixId_ = matrixId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.chunkId_ = chunkId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.startRow_ = startRow_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.endRow_ = endRow_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.startCol_ = startCol_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.endCol_ = endCol_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.format_ = format_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.elementType_ = elementType_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.semiRing_ = semiRing_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.matricesOnTheWire_ = matricesOnTheWire_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body) {
          return mergeFrom((it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body other) {
        if (other == it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body.getDefaultInstance()) return this;
        if (other.hasMatrixId()) {
          setMatrixId(other.getMatrixId());
        }
        if (other.hasChunkId()) {
          setChunkId(other.getChunkId());
        }
        if (other.hasStartRow()) {
          setStartRow(other.getStartRow());
        }
        if (other.hasEndRow()) {
          setEndRow(other.getEndRow());
        }
        if (other.hasStartCol()) {
          setStartCol(other.getStartCol());
        }
        if (other.hasEndCol()) {
          setEndCol(other.getEndCol());
        }
        if (other.hasFormat()) {
          setFormat(other.getFormat());
        }
        if (other.hasElementType()) {
          setElementType(other.getElementType());
        }
        if (other.hasSemiRing()) {
          setSemiRing(other.getSemiRing());
        }
        if (other.hasMatricesOnTheWire()) {
          setMatricesOnTheWire(other.getMatricesOnTheWire());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasMatrixId()) {
          
          return false;
        }
        if (!hasChunkId()) {
          
          return false;
        }
        if (!hasStartRow()) {
          
          return false;
        }
        if (!hasEndRow()) {
          
          return false;
        }
        if (!hasStartCol()) {
          
          return false;
        }
        if (!hasEndCol()) {
          
          return false;
        }
        if (!hasFormat()) {
          
          return false;
        }
        if (!hasElementType()) {
          
          return false;
        }
        if (!hasSemiRing()) {
          
          return false;
        }
        if (!hasMatricesOnTheWire()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              matrixId_ = input.readBytes();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              chunkId_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              startRow_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              endRow_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              startCol_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              endCol_ = input.readInt32();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format value = it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                format_ = value;
              }
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType value = it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                elementType_ = value;
              }
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing value = it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                semiRing_ = value;
              }
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire value = it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                matricesOnTheWire_ = value;
              }
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required string matrixId = 1;
      private java.lang.Object matrixId_ = "";
      public boolean hasMatrixId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public String getMatrixId() {
        java.lang.Object ref = matrixId_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          matrixId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setMatrixId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        matrixId_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatrixId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        matrixId_ = getDefaultInstance().getMatrixId();
        onChanged();
        return this;
      }
      void setMatrixId(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000001;
        matrixId_ = value;
        onChanged();
      }
      
      // required string chunkId = 2;
      private java.lang.Object chunkId_ = "";
      public boolean hasChunkId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public String getChunkId() {
        java.lang.Object ref = chunkId_;
        if (!(ref instanceof String)) {
          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();
          chunkId_ = s;
          return s;
        } else {
          return (String) ref;
        }
      }
      public Builder setChunkId(String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        chunkId_ = value;
        onChanged();
        return this;
      }
      public Builder clearChunkId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        chunkId_ = getDefaultInstance().getChunkId();
        onChanged();
        return this;
      }
      void setChunkId(com.google.protobuf.ByteString value) {
        bitField0_ |= 0x00000002;
        chunkId_ = value;
        onChanged();
      }
      
      // required int32 startRow = 3;
      private int startRow_ ;
      public boolean hasStartRow() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getStartRow() {
        return startRow_;
      }
      public Builder setStartRow(int value) {
        bitField0_ |= 0x00000004;
        startRow_ = value;
        onChanged();
        return this;
      }
      public Builder clearStartRow() {
        bitField0_ = (bitField0_ & ~0x00000004);
        startRow_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 endRow = 4;
      private int endRow_ ;
      public boolean hasEndRow() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getEndRow() {
        return endRow_;
      }
      public Builder setEndRow(int value) {
        bitField0_ |= 0x00000008;
        endRow_ = value;
        onChanged();
        return this;
      }
      public Builder clearEndRow() {
        bitField0_ = (bitField0_ & ~0x00000008);
        endRow_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 startCol = 5;
      private int startCol_ ;
      public boolean hasStartCol() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getStartCol() {
        return startCol_;
      }
      public Builder setStartCol(int value) {
        bitField0_ |= 0x00000010;
        startCol_ = value;
        onChanged();
        return this;
      }
      public Builder clearStartCol() {
        bitField0_ = (bitField0_ & ~0x00000010);
        startCol_ = 0;
        onChanged();
        return this;
      }
      
      // required int32 endCol = 6;
      private int endCol_ ;
      public boolean hasEndCol() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getEndCol() {
        return endCol_;
      }
      public Builder setEndCol(int value) {
        bitField0_ |= 0x00000020;
        endCol_ = value;
        onChanged();
        return this;
      }
      public Builder clearEndCol() {
        bitField0_ = (bitField0_ & ~0x00000020);
        endCol_ = 0;
        onChanged();
        return this;
      }
      
      // required .Format format = 7 [default = DENSE];
      private it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format.DENSE;
      public boolean hasFormat() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format getFormat() {
        return format_;
      }
      public Builder setFormat(it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        format_ = value;
        onChanged();
        return this;
      }
      public Builder clearFormat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        format_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.Format.DENSE;
        onChanged();
        return this;
      }
      
      // required .ElementType elementType = 8 [default = INT32];
      private it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType elementType_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType.INT32;
      public boolean hasElementType() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType getElementType() {
        return elementType_;
      }
      public Builder setElementType(it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        elementType_ = value;
        onChanged();
        return this;
      }
      public Builder clearElementType() {
        bitField0_ = (bitField0_ & ~0x00000080);
        elementType_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.ElementType.INT32;
        onChanged();
        return this;
      }
      
      // required .SemiRing semiRing = 9 [default = DEFAULTSEMIRING];
      private it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing semiRing_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing.DEFAULTSEMIRING;
      public boolean hasSemiRing() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing getSemiRing() {
        return semiRing_;
      }
      public Builder setSemiRing(it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        semiRing_ = value;
        onChanged();
        return this;
      }
      public Builder clearSemiRing() {
        bitField0_ = (bitField0_ & ~0x00000100);
        semiRing_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.SemiRing.DEFAULTSEMIRING;
        onChanged();
        return this;
      }
      
      // required .MatricesOnTheWire matricesOnTheWire = 10 [default = DEFAULTMATRICESONTHEWIRE];
      private it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
      public boolean hasMatricesOnTheWire() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire getMatricesOnTheWire() {
        return matricesOnTheWire_;
      }
      public Builder setMatricesOnTheWire(it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        matricesOnTheWire_ = value;
        onChanged();
        return this;
      }
      public Builder clearMatricesOnTheWire() {
        bitField0_ = (bitField0_ & ~0x00000200);
        matricesOnTheWire_ = it.unipr.aotlab.dmat.core.generated.ChunkDescription.MatricesOnTheWire.DEFAULTMATRICESONTHEWIRE;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:Body)
    }
    
    static {
      defaultInstance = new Body(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Body)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Body_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Body_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n=home/paolo/uni/dissertation/dmat/proto" +
      "/ChunkDescription.proto\"\256\002\n\004Body\022\020\n\010matr" +
      "ixId\030\001 \002(\t\022\017\n\007chunkId\030\002 \002(\t\022\020\n\010startRow\030" +
      "\003 \002(\005\022\016\n\006endRow\030\004 \002(\005\022\020\n\010startCol\030\005 \002(\005\022" +
      "\016\n\006endCol\030\006 \002(\005\022\036\n\006format\030\007 \002(\0162\007.Format" +
      ":\005DENSE\022(\n\013elementType\030\010 \002(\0162\014.ElementTy" +
      "pe:\005INT32\022,\n\010semiRing\030\t \002(\0162\t.SemiRing:\017" +
      "DEFAULTSEMIRING\022G\n\021matricesOnTheWire\030\n \002" +
      "(\0162\022.MatricesOnTheWire:\030DEFAULTMATRICESO" +
      "NTHEWIRE*>\n\006Format\022\022\n\016COMPRESSEDROWS\020\001\022\025",
      "\n\021COMPRESSEDCOLUMNS\020\002\022\t\n\005DENSE\020\003*\213\001\n\013Ele" +
      "mentType\022\010\n\004BOOL\020\001\022\010\n\004INT8\020\002\022\t\n\005INT16\020\003\022" +
      "\t\n\005INT32\020\004\022\t\n\005INT64\020\005\022\t\n\005UINT8\020\006\022\n\n\006UINT" +
      "16\020\007\022\n\n\006UINT32\020\010\022\n\n\006UINT64\020\t\022\013\n\007FLOAT32\020" +
      "\n\022\013\n\007FLOAT64\020\013*Z\n\010SemiRing\022\023\n\017DEFAULTSEM" +
      "IRING\020\001\022\021\n\rINT32ORDINARY\020\002\022\021\n\rINT32TROPI" +
      "CAL\020\003\022\023\n\017BOOLEANORDINARY\020\004*D\n\021MatricesOn" +
      "TheWire\022\034\n\030DEFAULTMATRICESONTHEWIRE\020\001\022\021\n" +
      "\rINT32TRIPLETS\020\002B%\n#it.unipr.aotlab.dmat" +
      ".core.generated"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_Body_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_Body_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Body_descriptor,
              new java.lang.String[] { "MatrixId", "ChunkId", "StartRow", "EndRow", "StartCol", "EndCol", "Format", "ElementType", "SemiRing", "MatricesOnTheWire", },
              it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body.class,
              it.unipr.aotlab.dmat.core.generated.ChunkDescription.Body.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
