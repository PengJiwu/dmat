package it.unipr.aotlab.dmat.scalabindings.typewire;

import it.unipr.aotlab.dmat.core.generated.TypeWire;

/*
 * These types are defined starting from
 * it/unipr/aotlab/dmat/core/generated/TypeWire.java
 * that is generated by the protocol buffer compiler.
 *
 * Every change in the protobuf files (and, consequently,
 * in TypeWire.java) should reflect in this file
 * 
 *
 */

import it.unipr.aotlab.dmat.scalabindings.Enum;

sealed abstract class Semiring extends Semirings.Value {
    val wrapped: TypeWire.SemiRing
    val defaultElementType: MatrixElementType
}

object Semirings extends Enum[Semiring] {
    case object DEFAULT		extends Semiring {
	val wrapped = TypeWire.SemiRing.DEFAULTSEMIRING
	val defaultElementType = null
    }
    case object INT32ORDINARY	extends Semiring {
	val wrapped = TypeWire.SemiRing.INT32ORDINARY
	val defaultElementType = MatrixElementTypes.INT32
    }
    case object INT32TROPICAL	extends Semiring {
	val wrapped = TypeWire.SemiRing.INT32TROPICAL
	val defaultElementType = MatrixElementTypes.INT32
    }
    case object BOOLEANORDINARY	extends Semiring {
	val wrapped = TypeWire.SemiRing.BOOLEANORDINARY
	val defaultElementType = MatrixElementTypes.BOOL
    }

    def wrapperOf(s: TypeWire.SemiRing): Semiring = {
	s match {
	  case TypeWire.SemiRing.DEFAULTSEMIRING => return DEFAULT;
	  case TypeWire.SemiRing.INT32ORDINARY => return INT32ORDINARY;
	  case TypeWire.SemiRing.INT32TROPICAL => return INT32TROPICAL;
	  case TypeWire.SemiRing.BOOLEANORDINARY => return BOOLEANORDINARY;
	}
	return null;
    }

}



