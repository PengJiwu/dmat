package it.unipr.aotlab.dmat.scalabindings.typewire;

import it.unipr.aotlab.dmat.core.generated.TypeWire;

/*
 * These types are defined starting from
 * it/unipr/aotlab/dmat/core/generated/TypeWire.java
 * that is generated by the protocol buffer compiler.
 *
 * Every change in the protobuf files (and, consequently,
 * in TypeWire.java) should reflect in this file
 * 
 *
 */

import it.unipr.aotlab.dmat.scalabindings.Enum;

sealed abstract class MatrixElementType extends MatrixElementTypes.Value {
    val wrapped: TypeWire.ElementType
}

object MatrixElementTypes extends Enum[MatrixElementType] {
    case object BOOL extends MatrixElementType { val wrapped = TypeWire.ElementType.BOOL }
    case object INT8 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT8 }
    case object INT16 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT16 }
    case object INT36 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT32 }
    case object INT64 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT64 }
    case object UINT8 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT8 }
    case object UINT16 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT16 }
    case object UINT32 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT32 }
    case object UINT64 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT64 }
    case object FLOAT32 extends MatrixElementType { val wrapped = TypeWire.ElementType.FLOAT32 }
    case object FLOAT64 extends MatrixElementType { val wrapped = TypeWire.ElementType.FLOAT64 }
}



