package it.unipr.aotlab.dmat.scalabindings.typewire;

import it.unipr.aotlab.dmat.core.generated.TypeWire;

/*
 * These types are defined starting from
 * it/unipr/aotlab/dmat/core/generated/TypeWire.java
 * that is generated by the protocol buffer compiler.
 *
 * Every change in the protobuf files (and, consequently,
 * in TypeWire.java) should reflect in this file
 * 
 *
 */

import it.unipr.aotlab.dmat.scalabindings.Enum;

sealed abstract class MatrixElementType extends MatrixElementTypes.Value {
    val wrapped: TypeWire.ElementType
}

object MatrixElementTypes extends Enum[MatrixElementType] {
    case object BOOL extends MatrixElementType { val wrapped = TypeWire.ElementType.BOOL }
    case object INT8 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT8 }
    case object INT16 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT16 }
    case object INT32 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT32 }
    case object INT64 extends MatrixElementType { val wrapped = TypeWire.ElementType.INT64 }
    case object UINT8 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT8 }
    case object UINT16 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT16 }
    case object UINT32 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT32 }
    case object UINT64 extends MatrixElementType { val wrapped = TypeWire.ElementType.UINT64 }
    case object FLOAT32 extends MatrixElementType { val wrapped = TypeWire.ElementType.FLOAT32 }
    case object FLOAT64 extends MatrixElementType { val wrapped = TypeWire.ElementType.FLOAT64 }

    def wrapperOf(et: TypeWire.ElementType): MatrixElementType = {
	et match {
	    case TypeWire.ElementType.BOOL => return BOOL;
	    case TypeWire.ElementType.INT8 => return INT8;
	    case TypeWire.ElementType.INT16 => return INT16;
	    case TypeWire.ElementType.INT32 => return INT32;
	    case TypeWire.ElementType.INT64 => return INT64;
	    case TypeWire.ElementType.UINT8 => return UINT8;
	    case TypeWire.ElementType.UINT16 => return UINT16;
	    case TypeWire.ElementType.UINT32 => return UINT32;
	    case TypeWire.ElementType.UINT64 => return UINT64;
	    case TypeWire.ElementType.FLOAT32 => return FLOAT32;
	    case TypeWire.ElementType.FLOAT64 => return FLOAT64;
	}
	return null;
    }

}



